<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 扫描包 -->
    <context:component-scan base-package="com.sshen.spring6.annoaop"></context:component-scan>

    <!-- 配置aop5种通知类型 -->
    <!--
         <aop:pointcut>：定义拦截规则。
         <aop:advisor>：快速绑定现成的 Advice 到切入点（适合事务管理等场景）。
         <aop:aspect>：自定义复杂切面逻辑，支持多种通知组合。
     -->
    <aop:config>
        <!-- 配置切面类，切入点的ref值，是因为上面已经配置了“扫描”，此时IOC容器中已经有了id=logAspectXml的组件，即可以直接使用 -->
        <aop:aspect ref="logAspectXml">
            <!-- 配置切入点 -->
            <aop:pointcut id="pointCut" expression="execution(public * com.sshen.spring6.annoaop.CalculatorImpl.*(..))"/>
            <!-- 前置通知 -->
            <aop:before method="beforeMethod" pointcut-ref="pointCut"></aop:before>
            <!-- 返回通知，可以获取目标方法的返回值 -->
            <aop:after-returning method="afterReturningMethod" pointcut-ref="pointCut" returning="result"></aop:after-returning>
            <!-- 异常通知 -->
            <aop:after-throwing method="afterThrowingMethod" pointcut-ref="pointCut" throwing="e"></aop:after-throwing>
            <!-- 后置通知 -->
            <aop:after method="afterMethod" pointcut-ref="pointCut"></aop:after>

            <!-- 环绕通知 -->
<!--            <aop:around method="aroundMethod" pointcut-ref="pointCut"></aop:around>-->
        </aop:aspect>
    </aop:config>

</beans>